import React, { useState, useEffect } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { useLocation } from 'react-router-dom'
import { FaChevronDown, FaChevronLeft, FaChevronRight, FaChevronUp } from 'react-icons/fa'
import '../scss/sidenav.scss'
import { Link } from 'react-router-dom'
import ZipcodeTableDialog from '../views/rapid-admin-edit/zipCodeTable/zipcodeTable';
import ClientReportMapping from '../views/rapid-admin-maintenance/ClientReportMapping/ClientReportMapping';
import InputRobotTotals from '../views/rapid-admin-report/productivity/InputRobotTotals/InputRobotTotals';
import EmailEventIdDialog from '../views/rapid-admin-report/EmailEventId/EmailEventId';
import DailyMessageDialog from '../views/rapid-admin-edit/DailyMessage/DailyMessage';


// sidebar nav config
import defaultNav from '../_nav'
import archiveNav from '../_archiveNav'

const AppSidebar = () => {
  const dispatch = useDispatch()

  const location = useLocation()

  const [navItems, setNavItems] = useState(defaultNav)
  const [activeSubNav, setActiveSubNav] = useState(null)

  const [queryMenuOpen, setQueryMenuOpen] = useState(false)
  const toggleQueryMenu = () => {
    setQueryMenuOpen(!queryMenuOpen)
  }


  const [robotLabelsDialogOpen, setRobotLabelsDialogOpen] = useState(false);
  const [zipcodeTableDialogOpen, setZipcodeTableDialogOpen] = useState(false);
  const [clientReportMappingOpen, setClientReportMappingOpen] = useState(false);
  const [inputRobotTotalsOpen, setInputRobotTotalsOpen] = useState(false);
  const [emailEventIdOpen, setEmailEventIdOpen] = useState(false);
  const [dailyMessageOpen, setDailyMessageOpen] = useState(false);

  const handleItemClick = (itemKey) => {
    switch (itemKey) {
      case 'robotLabels':
        setRobotLabelsDialogOpen(true);
        break;
      case 'zipcodeTable':
        setZipcodeTableDialogOpen(true);
        break;
      case 'clientReportMapping':
        setClientReportMappingOpen(true);
        break;
      case 'inputRobotTotals':
        setInputRobotTotalsOpen(true);
        break;
      case 'emailEventId':
        setEmailEventIdOpen(true);
        break;
      case 'dailyMessage':
        setDailyMessageOpen(true);
        break;
      default:
        break;
    }
  };



  useEffect(() => {
    // Define all routes (or route prefixes) where archiveNav should be used
    const archivePaths = [
      '/archive-dashboard',
      '/report/input-rebot-totals',
      '/archive-query-maintenance/define-query',
      '/archive-query-maintenance/c3-file-transfer',
      '/archive-query-maintenance/data-definitions',
      '/archive-query-maintenance/schedule-batch-report',
      '/archive-query-maintenance/table-load',
      '/archive-query-maintenance/table-load-column-mapping',
      '/archive-query-maintenance/tool-tips',
      '/archive-maintenance/client-report-mapping',
      '/archive-maintenance/resend-web-reports',
      '/archive-maintenance/web-client-directory',
      '/archive-report/billing',
      '/archive-maintenance/input-robot-totals',
      '/archive-report/unmatch-sys-prins',
      '/archive-report/report-queries',
      '/archive-report/email-event-id',
    ]

    const isArchiveRoute = archivePaths.some(path =>
      location.pathname === path || location.pathname.startsWith(path)
    )

    setNavItems(isArchiveRoute ? archiveNav : defaultNav)
  }, [location])

  // In AppSidebar.js
  const sidebarCollapsed = useSelector(state => state.sidebarCollapsed)
  const [editMenuOpen, setEditMenuOpen] = useState(false)
  const [maintenanceMenuOpen, setMaintenanceMenuOpen] = useState(false)
  const [reportsMenuOpen, setReportsMenuOpen] = useState(false)

  const toggleEditMenu = () => setEditMenuOpen(!editMenuOpen)
  const toggleMaintenanceMenu = () => setMaintenanceMenuOpen(!maintenanceMenuOpen)
  const toggleReportsMenu = () => setReportsMenuOpen(!reportsMenuOpen)
  return (
    <div className='sideNav'>
      <nav className={`nav${sidebarCollapsed ? ' collapsed' : ''}`}>
        <ul className='navList'>
          <li className='navItem'>
            <div className={`navLink${sidebarCollapsed ? ' nav-parent-collapsed' : ' nav-parent'}`} onClick={toggleEditMenu}>
              {!sidebarCollapsed && (
                <span className='text-container'>
                  <span className='navText'>Edit</span>
                </span>
              )}
              <span className='arrow-container'>
                <span className='navArrow'>
                  {!sidebarCollapsed && (editMenuOpen ? <FaChevronDown /> : <FaChevronRight />)}
                </span>
              </span>
            </div>
            {(editMenuOpen && !sidebarCollapsed) && (
              <ul className='subNavList'>
                <li
                  className={`subNavItem${activeSubNav === 'zipcodeTable' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('zipcodeTable'); handleItemClick('zipcodeTable'); }}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>ZIP Code Table</span>
                  </Link>
                </li>
                <li
                  className={`subNavItem${activeSubNav === 'dailyMessage' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('dailyMessage'); handleItemClick('dailyMessage'); }}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Daily Message</span>
                  </Link>
                </li>
                <li
                  className={`subNavItem${activeSubNav === 'mailType' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('mailType'); handleItemClick('mailType'); }}
                >
                  <Link className='subNavLink' to={'/edit/mailtype'}>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Mail Type</span>
                  </Link>
                </li>
                <li
                  className={`subNavItem${activeSubNav === 'emailsetup' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('emailsetup'); handleItemClick('emailsetup'); }}
                >
                  <Link className='subNavLink' to={'/edit/emailsetup'}>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Email Setup</span>
                  </Link>
                </li>
              </ul>
            )}
          </li>

          {/* Maintenance */}
          <li className='navItem'>
            <div className={`navLink${sidebarCollapsed ? ' nav-parent-collapsed' : ' nav-parent'}`} onClick={toggleMaintenanceMenu}>
              {!sidebarCollapsed && (
                <span className='text-container'>
                  <span className='navText'>Maintenance</span>
                </span>
              )}
              <span className='arrow-container'>
                <span className='navArrow'>
                  {!sidebarCollapsed && (maintenanceMenuOpen ? <FaChevronDown /> : <FaChevronRight />)}
                </span>
              </span>
            </div>
            {(maintenanceMenuOpen && !sidebarCollapsed) && (
              <ul className='subNavList'>
                <li
                  className={`subNavItem${activeSubNav === 'clientReportMapping' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('clientReportMapping'); handleItemClick('clientReportMapping'); }}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Client Report Mapping</span>
                  </Link>
                </li>
                <li
                  className={`subNavItem${activeSubNav === 'webClientDirectory' ? ' active' : ''}`}
                  onClick={() => setActiveSubNav('webClientDirectory')}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Web Client Directory</span>
                  </Link>
                </li>
              </ul>
            )}
          </li>

          {/* Reports */}
          <li className='navItem'>
            <div className={`navLink${sidebarCollapsed ? ' nav-parent-collapsed' : ' nav-parent'}`} onClick={toggleReportsMenu}>
              {!sidebarCollapsed && (
                <span className='text-container'>
                  <span className='navText'>Reports</span>
                </span>
              )}
              <span className='arrow-container'>
                <span className='navArrow'>
                  {!sidebarCollapsed && (reportsMenuOpen ? <FaChevronDown /> : <FaChevronRight />)}
                </span>
              </span>
            </div>
            {(reportsMenuOpen && !sidebarCollapsed) && (
              <ul className='subNavList'>
                <li
                  className={`subNavItem${activeSubNav === 'inputRobotTotals' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('inputRobotTotals'); handleItemClick('inputRobotTotals'); }}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Input Robot Totals</span>
                  </Link>
                </li>
                <li
                  className={`subNavItem${activeSubNav === 'emailEventId' ? ' active' : ''}`}
                  onClick={() => { setActiveSubNav('emailEventId'); handleItemClick('emailEventId'); }}
                >
                  <Link className='subNavLink'>
                    <span className='subNavIcon'></span>
                    <span className='subNavText'>Email Event Id</span>
                  </Link>
                </li>
              </ul>
            )}
          </li>
        </ul>
      </nav>

      <ZipcodeTableDialog open={zipcodeTableDialogOpen} onClose={() => setZipcodeTableDialogOpen(false)} />

      <ClientReportMapping open={clientReportMappingOpen} onClose={() => setClientReportMappingOpen(false)} />
      <InputRobotTotals open={inputRobotTotalsOpen} onClose={() => setInputRobotTotalsOpen(false)} />
      <EmailEventIdDialog open={emailEventIdOpen} onClose={() => setEmailEventIdOpen(false)} />
      <DailyMessageDialog open={dailyMessageOpen} onClose={() => setDailyMessageOpen(false)} />
    </div>

  )
}

export default React.memo(AppSidebar)
