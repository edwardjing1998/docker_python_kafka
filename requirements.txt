package rapid.service.client;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import rapid.client.mapper.ClientReportOptionMapper;
import rapid.client.mapper.fetch.ClientReportOptionDataBundle;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.model.client.AdminQueryList;
import rapid.model.client.C3FileTransfer;
import rapid.model.client.ClientReportOption;
import rapid.service.client.fetcher.ClientReportOptionDataFetcher;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
@RequiredArgsConstructor
public class ClientReportOptionService {

    private final ClientReportOptionDataFetcher dataFetcher;
    private final ClientReportOptionMapper optionMapper;

    public List<ClientReportOptionDTO> getAllWithDetails() {

        List<Integer> reportIds = new ArrayList<>(
                dataFetcher.getAdminRepo().findAllReportIds()
        );

        ClientReportOptionDataBundle bundle = dataFetcher.fetchForReports(reportIds);

        return reportIds.stream()
                .flatMap(id -> {
                    AdminQueryList admin = bundle.adminQueryList().get(id);
                    C3FileTransfer c3 = bundle.c3FileTransfer().get(id);
                    List<ClientReportOption> options = bundle.clientReportOptions().get(id);

                    if (options == null) return Stream.empty();

                    return options.stream().map(option -> {
                        option.setReportDetails(admin);
                        admin.setC3FileTransfer(c3);
                        return optionMapper.toDto(option);
                    });
                })
                .collect(Collectors.toList());
    }

        public List<ClientReportOptionDTO> getAllWithDetailsByClient(String clientId) {
        String cid = clientId == null ? null : clientId.trim();
        if (cid == null || cid.isEmpty()) return List.of();

        return getAllWithDetails().stream()
                .filter(dto -> {
                    if (dto.getClientId() != null) {
                        return cid.equals(dto.getClientId());
                    }
                    return dto.getClientId() != null && cid.equals(dto.getClientId());
                })
                .collect(Collectors.toList());
    }
}
