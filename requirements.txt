package rapid.client.web;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.service.client.ClientReportOptionService;

import java.util.List;
import java.util.regex.Pattern;
import rapid.exception.ClientBadRequestException;

@RestController
@RequestMapping("api/")
@RequiredArgsConstructor
public class ClientReportOptionController {

     private static final Pattern CLINT_ID_PATTERN = Pattern.compile("^[0-9]{4}$");

    private final ClientReportOptionService service;

    @GetMapping("client/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getAllReports() {
        List<ClientReportOptionDTO> dtos = service.getAllWithDetails();
        return ResponseEntity.ok(dtos);
    }

        @GetMapping("client/{clientId}/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getReportsByClientId(@PathVariable String clientId) {

        if (!CLINT_ID_PATTERN.matcher(clientId).matches()) {
            throw new ClientBadRequestException("Invalid 'clientNumber': must be exactly 4 digits and can not contains alphabetic characters");
        }

        return ResponseEntity.ok(service.getAllWithDetailsByClient(clientId));
    }
    
}







@WebMvcTest(controllers = ClientController.class) // <-- pin to THIS controller only
class ClientControllerTest {

    @Autowired MockMvc mockMvc;
    @MockBean ClientService clientService; // <-- mock dependency
    @Autowired ObjectMapper objectMapper;

    private ClientDTO mockClient(String id) {
        ClientDTO dto = Mockito.mock(ClientDTO.class);
        when(dto.getClientId()).thenReturn(id);
        return dto;
    }

    @Test @DisplayName("GET /api/allClients returns 200 and list")
    void getAllClients_ok() throws Exception {
        when(clientService.getAllClients()).thenReturn(List.of(mockClient("CL001"), mockClient("CL002")));

        mockMvc.perform(get("/api/allClients").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL001"))
                .andExpect(jsonPath("$[1].clientId").value("CL002"));

        verify(clientService).getAllClients();
    }

    @Test @DisplayName("GET /api/client/page returns 200 with defaults (page=0,size=10)")
    void getClientsPaginated_defaults() throws Exception {
        when(clientService.fetchClientsWithPagination(anyInt(), anyInt())).thenReturn(List.of());

        mockMvc.perform(get("/api/client/page").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(clientService).fetchClientsWithPagination(0, 10);
    }

    @Test @DisplayName("GET /api/client/page with custom params")
    void getClientsPaginated_ok() throws Exception {
        when(clientService.fetchClientsWithPagination(2, 5))
                .thenReturn(List.of(mockClient("CL010"), mockClient("CL011")));

        mockMvc.perform(get("/api/client/page").queryParam("page","2").queryParam("size","5"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL010"))
                .andExpect(jsonPath("$[1].clientId").value("CL011"));

        verify(clientService).fetchClientsWithPagination(2, 5);
    }

    @Test @DisplayName("GET /api/client/{id} returns 200 when found")
    void getClientById_ok() throws Exception {
        when(clientService.getClientDetails("CL123")).thenReturn(Optional.of(mockClient("CL123")));

        mockMvc.perform(get("/api/client/{clientId}", "CL123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.clientId").value("CL123"));

        verify(clientService).getClientDetails("CL123");
    }

    @Test @DisplayName("GET /api/client/{id} returns 404 when not found")
    void getClientById_notFound() throws Exception {
        when(clientService.getClientDetails("NO_SUCH")).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/client/{clientId}", "NO_SUCH"))
                .andExpect(status().isNotFound()); // ensure your exception maps to 404

        verify(clientService).getClientDetails("NO_SUCH");
    }
}
