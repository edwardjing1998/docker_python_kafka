package rapid.client.web;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import rapid.dto.client.ClientDTO;
import rapid.exception.ClientNotFoundException;
import rapid.service.client.ClientService;

import java.util.List;

@RestController
@RequestMapping("/api/")
@RequiredArgsConstructor
@Slf4j
public class ClientController {

    private final ClientService clientService;

    @GetMapping("allClients")
    public ResponseEntity<List<ClientDTO>> getAllClients() {
        List<ClientDTO> clients = clientService.getAllClients();
        return ResponseEntity.ok(clients);
    }

    @GetMapping("client/page")
    public List<ClientDTO> getClientsPaginated(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        return clientService.fetchClientsWithPagination(page, size);
    }

    @GetMapping("client/{clientId}")
    public ResponseEntity<ClientDTO> getClientByClientId(@PathVariable String clientId) {
        ClientDTO dto = clientService.getClientDetails(clientId)   // returns Optional<ClientDTO>
                .orElseThrow(() -> new ClientNotFoundException(clientId));
        return ResponseEntity.ok(dto);
    }
}
