package rapid.client.web;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.service.client.ClientReportOptionService;

import java.util.List;
import java.util.regex.Pattern;
import rapid.exception.ClientBadRequestException;

@RestController
@RequestMapping("api/")
@RequiredArgsConstructor
public class ClientReportOptionController {

     private static final Pattern CLINT_ID_PATTERN = Pattern.compile("^[0-9]{4}$");

    private final ClientReportOptionService service;

    @GetMapping("client/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getAllReports() {
        List<ClientReportOptionDTO> dtos = service.getAllWithDetails();
        return ResponseEntity.ok(dtos);
    }

        @GetMapping("client/{clientId}/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getReportsByClientId(@PathVariable String clientId) {

        if (!CLINT_ID_PATTERN.matcher(clientId).matches()) {
            throw new ClientBadRequestException("Invalid 'clientNumber': must be exactly 4 digits and can not contains alphabetic characters");
        }

        return ResponseEntity.ok(service.getAllWithDetailsByClient(clientId));
    }
    
}







import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.service.client.ClientReportOptionService;

import java.util.List;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ClientReportOptionController.class)
class ClientReportOptionControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ClientReportOptionService service;

    private ClientReportOptionDTO mockDto() {
        // Keep it genericâ€”no field assertions needed
        return Mockito.mock(ClientReportOptionDTO.class);
    }

    @Test
    @DisplayName("GET /api/client/report-option returns 200 with list")
    void getAllReports_ok() throws Exception {
        when(service.getAllWithDetails()).thenReturn(List.of(mockDto(), mockDto()));

        mockMvc.perform(get("/api/client/report-option").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(2)));

        verify(service, times(1)).getAllWithDetails();
        verifyNoMoreInteractions(service);
    }

    @Test
    @DisplayName("GET /api/client/{clientId}/report-option returns 200 for 4-digit id and calls service")
    void getReportsByClient_validId_ok() throws Exception {
        String clientId = "1234";
        when(service.getAllWithDetailsByClient(clientId))
                .thenReturn(List.of(mockDto()));

        mockMvc.perform(get("/api/client/{clientId}/report-option", clientId)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(1)));

        verify(service, times(1)).getAllWithDetailsByClient(eq(clientId));
        verifyNoMoreInteractions(service);
    }

    @ParameterizedTest(name = "Invalid clientId \"{0}\" should return 400")
    @ValueSource(strings = {"123", "12345", "12a4", "ABCD", "", "  ", "000", "12-4"})
    void getReportsByClient_invalidId_badRequest(String badId) throws Exception {
        mockMvc.perform(get("/api/client/{clientId}/report-option", badId)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest());

        // Ensure service not called when validation fails
        verifyNoInteractions(service);
    }
}


mvn -Dtest=ClientControllerTest test


