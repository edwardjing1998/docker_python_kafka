package rapid.client.web;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.service.client.ClientReportOptionService;

import java.util.List;
import java.util.regex.Pattern;
import rapid.exception.ClientBadRequestException;

@RestController
@RequestMapping("api/")
@RequiredArgsConstructor
public class ClientReportOptionController {

     private static final Pattern CLINT_ID_PATTERN = Pattern.compile("^[0-9]{4}$");

    private final ClientReportOptionService service;

    @GetMapping("client/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getAllReports() {
        List<ClientReportOptionDTO> dtos = service.getAllWithDetails();
        return ResponseEntity.ok(dtos);
    }

        @GetMapping("client/{clientId}/report-option")
    public ResponseEntity<List<ClientReportOptionDTO>> getReportsByClientId(@PathVariable String clientId) {

        if (!CLINT_ID_PATTERN.matcher(clientId).matches()) {
            throw new ClientBadRequestException("Invalid 'clientNumber': must be exactly 4 digits and can not contains alphabetic characters");
        }

        return ResponseEntity.ok(service.getAllWithDetailsByClient(clientId));
    }
    
}







import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import rapid.dto.client.ClientReportOptionDTO;
import rapid.service.client.ClientReportOptionService;

import java.util.List;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ClientReportOptionController.class)
class ClientReportOptionControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ClientReportOptionService service;

    private ClientReportOptionDTO mockDto() {
        // Keep it generic—no field assertions needed
        return Mockito.mock(ClientReportOptionDTO.class);
    }

    @Test
    @DisplayName("GET /api/client/report-option returns 200 with list")
    void getAllReports_ok() throws Exception {
        when(service.getAllWithDetails()).thenReturn(List.of(mockDto(), mockDto()));

        mockMvc.perform(get("/api/client/report-option").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(2)));

        verify(service, times(1)).getAllWithDetails();
        verifyNoMoreInteractions(service);
    }

    @Test
    @DisplayName("GET /api/client/{clientId}/report-option returns 200 for 4-digit id and calls service")
    void getReportsByClient_validId_ok() throws Exception {
        String clientId = "1234";
        when(service.getAllWithDetailsByClient(clientId))
                .thenReturn(List.of(mockDto()));

        mockMvc.perform(get("/api/client/{clientId}/report-option", clientId)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(1)));

        verify(service, times(1)).getAllWithDetailsByClient(eq(clientId));
        verifyNoMoreInteractions(service);
    }

    @ParameterizedTest(name = "Invalid clientId \"{0}\" should return 400")
    @ValueSource(strings = {"123", "12345", "12a4", "ABCD", "", "  ", "000", "12-4"})
    void getReportsByClient_invalidId_badRequest(String badId) throws Exception {
        mockMvc.perform(get("/api/client/{clientId}/report-option", badId)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest());

        // Ensure service not called when validation fails
        verifyNoInteractions(service);
    }
}


mvn -Dtest=ClientControllerTest test




package rapid.service.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import rapid.dto.client.ClientDTO;
import rapid.exception.ClientNotFoundException;
import rapid.service.client.ClientService;

import java.util.List;
import java.util.Optional;
import rapid.client.web.ClientController;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

@WebMvcTest(controllers = ClientController.class) // <-- pin to THIS controller only
@AutoConfigureMockMvc(addFilters = false)
class ClientControllerTest {

    @Autowired MockMvc mockMvc;
    @MockBean ClientService clientService; // <-- mock dependency
    @Autowired ObjectMapper objectMapper;

    private ClientDTO mockClient(String id) {
        ClientDTO dto = Mockito.mock(ClientDTO.class);
        when(dto.getClient()).thenReturn(id);
        return dto;
    }

    @Test @DisplayName("GET /api/allClients returns 200 and list")
    void getAllClients_ok() throws Exception {
        when(clientService.getAllClients()).thenReturn(List.of(mockClient("CL001"), mockClient("CL002")));

        mockMvc.perform(get("/api/allClients").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL001"))
                .andExpect(jsonPath("$[1].clientId").value("CL002"));

        verify(clientService).getAllClients();
    }

    @Test @DisplayName("GET /api/client/page returns 200 with defaults (page=0,size=10)")
    void getClientsPaginated_defaults() throws Exception {
        when(clientService.fetchClientsWithPagination(anyInt(), anyInt())).thenReturn(List.of());

        mockMvc.perform(get("/api/client/page").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(clientService).fetchClientsWithPagination(0, 10);
    }

    @Test @DisplayName("GET /api/client/page with custom params")
    void getClientsPaginated_ok() throws Exception {
        when(clientService.fetchClientsWithPagination(2, 5))
                .thenReturn(List.of(mockClient("CL010"), mockClient("CL011")));

        mockMvc.perform(get("/api/client/page").queryParam("page","2").queryParam("size","5"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL010"))
                .andExpect(jsonPath("$[1].clientId").value("CL011"));

        verify(clientService).fetchClientsWithPagination(2, 5);
    }

    @Test @DisplayName("GET /api/client/{id} returns 200 when found")
    void getClientById_ok() throws Exception {
        when(clientService.getClientDetails("CL123")).thenReturn(Optional.of(mockClient("CL123")));

        mockMvc.perform(get("/api/client/{clientId}", "CL123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.clientId").value("CL123"));

        verify(clientService).getClientDetails("CL123");
    }

    @Test @DisplayName("GET /api/client/{id} returns 404 when not found")
    void getClientById_notFound() throws Exception {
        when(clientService.getClientDetails("NO_SUCH")).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/client/{clientId}", "NO_SUCH"))
                .andExpect(status().isNotFound()); // ensure your exception maps to 404

        verify(clientService).getClientDetails("NO_SUCH");
    }
}


[ERROR] Errors: 
[ERROR]   ClientControllerTest ┬╗ IllegalState Found multiple @SpringBootConfiguration annotated classes [Generic bean: class=rapid.ClientSysPrinReaderApplication; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; fallback=false; factoryBeanName=null; factoryMethodName=null; initMethodNames=null; destroyMethodNames=null; defined in file [C:\Users\F2LIPBX\spring_boot\trace-client-sysprin-service\client-sysprin-reader\target\classes\rapid\ClientSysPrinReaderApplication.class], Generic bean: class=rapid.CommonServiceApplication; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; fallback=false; factoryBeanName=null; factoryMethodName=null; initMethodNames=null; destroyMethodNames=null; defined in URL [jar:file:/C:/Users/F2LIPBX/.m2/repository/trace-client-sysprin-service/common-services/0.0.1-SNAPSHOT/common-services-0.0.1-SNAPSHOT.jar!/rapid/CommonServiceApplication.class]]
[INFO]
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0





    private MockMvc mockMvc;
    private ClientService clientService;

    private ClientDTO mockClient(String id) {
        ClientDTO dto = Mockito.mock(ClientDTO.class);
        // IMPORTANT: stub getClientId(), not getClient()
        when(dto.getClientId()).thenReturn(id);
        return dto;
    }

    @BeforeEach
    void setup() {
        clientService = Mockito.mock(ClientService.class);
        ClientController controller = new ClientController(clientService);

        // If you have a @ControllerAdvice for exceptions, add it here via setControllerAdvice(...)
        mockMvc = MockMvcBuilders.standaloneSetup(controller)
                //.setControllerAdvice(new GlobalExceptionHandler())
                .build();
    }

    @Test
    @DisplayName("GET /api/allClients returns 200 and list")
    void getAllClients_ok() throws Exception {
        when(clientService.getAllClients()).thenReturn(List.of(mockClient("CL001"), mockClient("CL002")));

        mockMvc.perform(get("/api/allClients").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL001"))
                .andExpect(jsonPath("$[1].clientId").value("CL002"));

        verify(clientService).getAllClients();
        verifyNoMoreInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/client/page returns 200 with defaults (page=0,size=10)")
    void getClientsPaginated_defaults() throws Exception {
        when(clientService.fetchClientsWithPagination(anyInt(), anyInt())).thenReturn(List.of());

        mockMvc.perform(get("/api/client/page").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(clientService).fetchClientsWithPagination(0, 10);
        verifyNoMoreInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/client/page with custom params")
    void getClientsPaginated_ok() throws Exception {
        when(clientService.fetchClientsWithPagination(2, 5))
                .thenReturn(List.of(mockClient("CL010"), mockClient("CL011")));

        mockMvc.perform(get("/api/client/page").queryParam("page", "2").queryParam("size", "5"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].clientId").value("CL010"))
                .andExpect(jsonPath("$[1].clientId").value("CL011"));

        verify(clientService).fetchClientsWithPagination(2, 5);
        verifyNoMoreInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/client/{id} returns 200 when found")
    void getClientById_ok() throws Exception {
        when(clientService.getClientDetails("CL123")).thenReturn(Optional.of(mockClient("CL123")));

        mockMvc.perform(get("/api/client/{clientId}", "CL123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.clientId").value("CL123"));

        verify(clientService).getClientDetails("CL123");
        verifyNoMoreInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/client/{id} returns 404 when not found")
    void getClientById_notFound() throws Exception {
        when(clientService.getClientDetails("NO_SUCH")).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/client/{clientId}", "NO_SUCH"))
                .andExpect(status().isNotFound()); // ensure exception maps to 404 in your controller/advice

        verify(clientService).getClientDetails("NO_SUCH");
        verifyNoMoreInteractions(clientService);
    }












