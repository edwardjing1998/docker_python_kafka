package rapid.client.web;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import rapid.exception.ClientBadRequestException;
import rapid.exception.ClientEmailNotFoundException;
import rapid.exception.ClientNotFoundException;
import rapid.service.client.ClientService;
import rapid.dto.client.ClientDTO;
import rapid.dto.client.ClientEmailDTO;
import rapid.dto.client.SysPrinsPrefixDTO;
import rapid.model.client.Client;

import java.util.List;
import java.util.regex.Pattern;

@RestController
@RequestMapping("/api/")
@RequiredArgsConstructor
@Slf4j
public class ClientEmailController {

    private final ClientService clientService;

    private static final Pattern CLINT_ID_PATTERN = Pattern.compile("^[0-9]{4}$");

    private static final Pattern EMAIL_PATTERN = Pattern.compile(
            "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"
    );

    @GetMapping("email/by-client")
    public ResponseEntity<List<ClientEmailDTO>> getEmailsByClient(
            @RequestParam String clientId
    ) {
        // 1) validate clientId (same as /email/add & /email/delete)
        String cid = (clientId == null) ? null : clientId.trim();
        if (cid == null || !CLINT_ID_PATTERN.matcher(cid).matches()) {
            throw new ClientBadRequestException(
                    "Invalid 'clientNumber': must be exactly 4 digits and can not contains alphabetic characters"
            );
        }

        List<Client> clients = clientService.clients(cid);
        // 2) client existence check
        if (clients.size() == 0) {
            log.info("client is not existing ");
            throw new ClientNotFoundException("Client not found: " + cid);
        }

        // 3) fetch emails (empty list if none)
        List<ClientEmailDTO> emails = clientService.findEmailsByClientId(cid);
        return ResponseEntity.ok(emails);
    }
}
