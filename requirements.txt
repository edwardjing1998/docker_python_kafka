package rapid.service.client;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.Mockito;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import rapid.client.web.ClientEmailController;
import rapid.config.GlobalExceptionHandler;
import rapid.dto.client.ClientEmailDTO;
import rapid.model.client.Client;
import rapid.service.client.ClientService;

import java.util.List;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class ClientEmailControllerTest {

    private MockMvc mockMvc;
    private ClientService clientService;

    // If ClientEmailDTO has a no-arg ctor, prefer real objects:
    // private ClientEmailDTO emailDto() { return new ClientEmailDTO(); }
    // Using mocks is fine if the class isn't final and we don't assert fields.
    private ClientEmailDTO emailDto() { return Mockito.mock(ClientEmailDTO.class); }

    private Client clientEntity() { return Mockito.mock(Client.class); }

    @BeforeEach
    void setup() {
        clientService = Mockito.mock(ClientService.class);
        ClientEmailController controller = new ClientEmailController(clientService);

        mockMvc = MockMvcBuilders.standaloneSetup(controller)
                .setControllerAdvice(new GlobalExceptionHandler())
                .build();
    }

    @Test
    @DisplayName("GET /api/email/by-client?clientId=1234 -> 200 and empty list when no emails")
    void getEmailsByClient_ok_empty() throws Exception {
        String cid = "1234";
        when(clientService.clients(cid)).thenReturn(List.of(clientEntity()));
        when(clientService.findEmailsByClientId(cid)).thenReturn(List.of());

        mockMvc.perform(get("/api/email/by-client").queryParam("clientId", cid)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(0)));

        verify(clientService).clients(eq(cid));
        verify(clientService).findEmailsByClientId(eq(cid));
        verifyNoMoreInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/email/by-client?clientId=1234 -> 200 and list when emails exist")
    void getEmailsByClient_ok_nonEmpty() throws Exception {
        String cid = "1234";
        when(clientService.clients(cid)).thenReturn(List.of(clientEntity()));
        when(clientService.findEmailsByClientId(cid)).thenReturn(List.of(emailDto(), emailDto()));

        mockMvc.perform(get("/api/email/by-client").queryParam("clientId", cid)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(2)));

        verify(clientService).clients(eq(cid));
        verify(clientService).findEmailsByClientId(eq(cid));
        verifyNoMoreInteractions(clientService);
    }

    // Bad formats that still reach the controller (query param present) -> 400
    @ParameterizedTest(name = "Bad clientId \"{0}\" -> 400 (invalid format)")
    @ValueSource(strings = {"123", "12345", "12a4", "ABCD", "12-4", "  "})
    void getEmailsByClient_badFormat_badRequest(String bad) throws Exception {
        mockMvc.perform(get("/api/email/by-client").queryParam("clientId", bad)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest());

        verifyNoInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/email/by-client without clientId -> 400 (missing required param)")
    void getEmailsByClient_missingParam_badRequest() throws Exception {
        mockMvc.perform(get("/api/email/by-client").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest());

        verifyNoInteractions(clientService);
    }

    @Test
    @DisplayName("GET /api/email/by-client?clientId=9999 -> 404 when client does not exist")
    void getEmailsByClient_clientNotFound_notFound() throws Exception {
        String cid = "9999";
        when(clientService.clients(cid)).thenReturn(List.of()); // no such client

        mockMvc.perform(get("/api/email/by-client").queryParam("clientId", cid)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());

        verify(clientService).clients(eq(cid));
        verifyNoMoreInteractions(clientService);
    }
}
